#!/usr/bin/env bash

# The pipeline to convert legacy *-mib.c files with structures into new DMF
# markup involves parsing the C code. The pycparser (Python module) used
# for this is picky about what view of C it accepts as pre-processed input.
# This script is a postprocessor of C preprocessor - removes __attribute__
# declarations and other extended constructs, which are not compatible with
# pycparser; also make sure to use no compiler optimizations (-O0 in gcc).
#
#    Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
#    Copyright (C) 2016 - 2021 Jim Klimov <EvgenyKlimov@eaton.com>
#    Copyright (C) 2022 - 2025 Jim Klimov <jimklimov+nut@gmail.com>
#

# Note: on MacOS you would really want 'clang -E' here,
# as plain 'cpp' fails to parse their system headers.
# Internally there 'cpp' is 'clang -E -traditional-cpp'
# (for pre-C89 syntax) and 'cc', 'gcc', 'cpp' etc. are
# all links to 'clang' which does its job as told to.
# See https://bugs.llvm.org/show_bug.cgi?id=31886 and
# https://stackoverflow.com/questions/42031921/unterminated-unconditional-directive-error-when-preprocessing-c-code
[ -n "${CPP-}" ] || { [ -n "$CC" ] && CPP="$CC -E" || CPP="cpp" ; }
# Note that CWD may often be "DMF" or "DMF/somesubdir", so default for both
[ -n "${CPPFLAGS-}" ] || CPPFLAGS="-I../../include -I../../../include"
[ -n "${CFLAGS-}" ] || CFLAGS=""
[ -z "${CPP_ENV-}" ] || eval export $CPP_ENV
[ "${DEBUG_NUT_CPP-}" = "true" ] || DEBUG_NUT_CPP=false

set -o pipefail
#set -exv

# Hush when "make V=0"
if [ x"${DEBUG-}" = x -o x"${DEBUG-}" = x1 -o x"${V-}" = x1 ] ; then
    echo "PREPROCESS: ( cd `pwd` && $CPP $CFLAGS $CPPFLAGS $* )" >&2
fi

do_filter() {

if [ "${DEBUG_NUT_CPP_DISABLE_FILTER-}" = "true" ] ; then
    cat
    return
fi

# NOTE: "Directives not supported yet" in practice means #include <...>
# ones which were hidden by ifdef's but now pop up in pre-processed text
# somehow... So we filter those out too.

# \t in sed is not always portable, better use raw char value
TABCHAR="`printf '\t'`"
SPACETAB="[ $TABCHAR]"

# tee temp-cpp-orig.tmp | \
sed \
    -e '/^'"${SPACETAB}"'*$/d' \
    -e '/^'"${SPACETAB}"'*#'"${SPACETAB}"'*include/d' \
    -e 's/^'"${SPACETAB}"'*;/;/g' | \
perl -0pe 's/\n([^#].*)\n;/\n$1;\n/g' | \
sed \
    -e 's/__asm_*'"${SPACETAB}"'*(.*)'"${SPACETAB}"'*;/;/g' \
    -e 's/__asm_*'"${SPACETAB}"'*(.*)'"${SPACETAB}"'*$/ /g' \
    -e 's/(__typeof_*'"${SPACETAB}"'*([^()]*))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*(('"${SPACETAB}"'*__[A-Za-z0-9_-]*__'"${SPACETAB}"'*([^()]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((__aligned__([^()]*([^()]*))))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((__malloc__,'"${SPACETAB}"'*__alloc_size__'"${SPACETAB}"'*([0-9]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((aligned([0-9]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((alloc_size([0-9]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((alloc_size([0-9]*,[0-9]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((format_arg([0-9]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*(([^()]*))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((availability([^()]*,[^()]*)))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((availability([^()]*"[^"]*")))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((availability([^()]*"[^"]*"'"${SPACETAB}"'*"[^"]*")))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((__availability__([^()]*"[^"]*")))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((__deprecated__("[^"]*")))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*((__warning__'"${SPACETAB}"'*('"${SPACETAB}"'*"[^"]*"'"${SPACETAB}"'*"[^"]*")))'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute__'"${SPACETAB}"'*__DARWIN_ALIAS([^()]*)'"${SPACETAB}"'*/ /g' \
    -e 's/__attribute_malloc__\([ ;]\)/\1/g' \
    -e 's/__inline__/inline/g' \
    -e 's/__signed__/signed/g' \
    -e 's/__unsigned__/unsigned/g' \
    -e 's/__THROW;$/;/' \
    -e 's/__END_DECLS//g' \
    -e 's/__BEGIN_DECLS//g' \
    -e 's/void'"${SPACETAB}"'(\*signal(int, void (\*)(int)))(int);//g' \
    -e 's/static'"${SPACETAB}"'__inline/static/g' \
    -e 's/static'"${SPACETAB}"'*;/;/g' \
    -e 's/__extern_inline/extern/g' \
    -e 's/extern'"${SPACETAB}"'__inline/extern/g' \
    -e 's/_Float[0-9]*x*/float/g' \
    -e 's/__uint128_t/__uint64_t/g' \
    -e 's/\^'"${SPACETAB}"'_*_Nonnull/*/g' \
    -e 's/__restrict//g' \
    -e 's/_*_Nullable//g' \
    -e 's/_*_Nonnull//g' \
    -e 's/_Thread_local//g' \
    -e 's/'"${SPACETAB}"'__thread'"${SPACETAB}"'/ /g' \
    -e 's/__extension__//g' \
    -e 's/'"${SPACETAB}"'_Noreturn'"${SPACETAB}"'/ /g' \
    -e 's/^_Noreturn'"${SPACETAB}"'/ /g' \
    -e 's/__NORETURN_*//g' \
    -e 's/__builtin_va_list/int/g' \
| grep -E -v 'typedef [^;]* float;'
} # // end of do_filter()


# Repeat same filter a few times to strip appearing blank lines and trailing semicolons
$CPP $CFLAGS $CPPFLAGS "${@}" | \
    do_filter | \
    do_filter | \
    do_filter \
    | if $DEBUG_NUT_CPP ; then tee temp-cpp-filt.tmp ; else cat ; fi

RET=$?
if [ "$RET" = 0 ]; then
    # Hush when "make V=0"
    if [ x"${DEBUG-}" = x -o x"${DEBUG-}" = x1 -o x"${V-}" = x1 ] ; then
        echo "INFO: CPP+SED passed OK" >&2
    fi
else
    echo "ERROR: CPP+SED returned code $RET" >&2
    # Invalidate the C code so pycparser detects the problem early
    echo '#invalid-pragma-error FAILED TO PARSE CPP+SED'
fi

exit $RET
